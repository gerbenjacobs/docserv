// Code generated by go-bindata.
// sources:
// README.md
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x51\x6b\xe4\x36\x10\x7e\x3e\xfd\x8a\x69\xf6\x65\x17\x1a\x39\xaf\x4d\xe9\x43\xe9\xa5\xcd\x41\x7b\x1c\x97\x1c\x47\x09\x01\x6b\xe5\x59\x5b\x1b\x59\x32\x1a\xb9\xee\x72\xdc\x7f\xef\x48\xb6\xd7\x6e\x9b\x84\xd6\xb0\xa0\x95\x34\xdf\xcc\x7c\x33\xf3\x69\x03\x95\xd7\x84\xe1\x0f\x21\xa6\x05\x18\x02\x05\xbf\x78\xab\x5c\x0d\x9d\xd2\x4f\xaa\x46\x88\x8d\x8a\x70\xf2\x3d\x68\xe5\xc0\xb8\x88\x75\x50\x11\xd3\xca\xa7\xed\x00\x5d\xf0\x47\xd4\x11\xf8\x7f\x8d\x0e\xf3\xa9\x4a\xd8\x7d\x8b\x2e\xaa\x68\xbc\x83\x7d\xf0\x03\x7b\x90\x42\xbc\x8b\xd0\x28\x82\x38\x78\x68\x7d\x85\xf4\x3d\x04\x54\x95\x61\x87\xb1\xc1\x7f\x58\x1d\x82\x6f\xe1\x60\x2c\xd2\x89\x22\xb6\xe0\xc3\xec\x21\xdd\xa7\x74\x4b\x83\xf6\x9d\x41\x82\xc1\xc4\x06\x1e\x6a\x7f\xb9\x37\xae\x52\x51\x3d\x6e\x9b\x18\x3b\xba\x2e\x8a\x9a\x4f\xfa\xbd\xd4\xbe\x2d\x8e\x11\xb1\x1f\xd0\x15\xcb\xbd\x9d\x10\x9b\x0d\xbc\x73\x8c\x66\xad\x10\x65\x9d\xb2\x88\x70\xd9\xc3\xca\xae\xc6\xb0\x47\x77\x54\xda\xef\xa9\x98\xc8\x2a\x39\x97\x43\x26\xa6\x63\xbe\x80\xc3\xed\x69\x4e\x63\x0a\x4d\xed\x8d\x35\x91\xa3\xfb\x16\x94\x25\x4e\x58\x3d\xf1\x59\x1f\x30\x71\x65\x46\x97\xb0\x84\x22\x5f\x72\xff\x4c\xd8\x85\x94\xb2\xcc\xa1\x7f\x22\xae\x92\x10\x3f\x2f\x34\x25\x5e\x19\xaa\x64\x30\x51\x11\x5c\xff\x30\x17\x5a\xbe\xc7\xe1\xad\xd7\x77\xbc\xdc\x3e\x3c\x52\x0c\x1c\xef\x97\x8b\x8f\x37\x3f\xbe\xfd\xed\x46\xb6\xd5\xc5\xd7\x1d\xdf\x97\x1f\x7b\xb7\xdd\x25\x73\x21\xee\xc6\x3c\x26\x40\x59\x8c\x79\x49\x62\xa6\x53\x59\x3a\x15\x9b\x47\x29\x61\xc3\xec\xa7\x4c\xe6\xea\xaf\x29\x20\xc2\x48\xe5\x8b\xe1\x8c\x1e\xfe\x57\x50\x9c\xf3\x4f\xde\x1d\x4c\x9d\x41\x45\x3c\x75\x08\x13\xc0\xb8\xcf\xbe\x43\xcf\x0d\xf9\x45\xbc\xb9\x71\x55\xe7\xb9\x55\x61\xfa\x46\x78\x5e\x14\x05\x9c\xcf\xb8\x18\xd6\x30\x73\x2e\xad\xb6\x15\x1e\x54\x6f\xe3\x35\xe4\x42\xef\xc4\x9b\x4f\x84\x13\x0f\xe3\xb7\xf7\xde\xe6\x05\x63\x7c\x6e\x90\x93\x0d\xc9\xb0\x27\x84\x15\x5f\x2b\xa0\x03\x17\x1f\x19\x88\x83\x24\x58\x7d\x73\xb6\x09\xe8\x9e\x29\x9b\x29\x25\x38\x70\xa7\xff\x6d\x14\xc4\x9b\x5b\x4f\x71\x6d\xbc\xce\x24\x19\x37\xe9\xbc\x53\x21\x82\x3f\xe4\x02\xdc\xde\xdf\x7f\x98\xf2\xe2\x00\x97\x68\x2e\x2e\x38\x94\x0f\x3e\xbc\x8a\xd6\xa5\xf3\xff\x82\xf6\xdd\xd5\xd5\xd5\xc8\xd1\xad\xa9\x1b\xcb\xbf\x3c\x9b\xaf\x70\x44\x27\xce\xe9\x4f\x68\xd6\xd7\x17\x3c\xae\x5c\xa2\xea\x2e\x5f\xba\x8b\x27\x8b\xcf\xc6\x47\xf9\x64\x42\x4c\x6c\xbd\x8e\x5a\xa9\xf0\xd4\x5b\x9e\xf5\xaf\xe7\x16\xba\xc7\x96\xe7\x36\x72\x5f\x7f\xf3\x40\x3a\x20\x3a\x6a\x7c\x5c\x54\x23\xa8\x41\x8e\x23\xc8\x2e\x82\xf6\x2c\x7c\x2e\xbe\x28\x06\x45\xab\x98\x9a\x50\x2c\x48\xb2\x73\x35\x6b\xcb\xd4\x98\xac\x52\xed\x2c\x52\xac\x8d\x63\x5c\x10\xa7\x18\x58\x0b\xa0\x0c\x48\xac\xa6\x1a\xa9\x98\xb7\x65\x13\x5b\x5b\x4a\xf8\x7d\x12\x5f\xdd\xb0\x2e\xa7\xe9\x62\x99\x5e\x4c\x47\x0d\x1a\x0c\x35\xa3\xba\xf2\xe1\x28\x44\xe5\xa2\x16\x25\x90\x3f\x6b\x38\x9a\x5c\x8e\xd0\xbb\x5c\xd9\x95\xe3\x7d\x6f\x6c\xc5\xd3\xcd\xd7\x75\x30\x5d\x4c\x82\x9b\xae\x2d\x40\x50\x99\xc0\x5a\x6f\x4f\x3c\xd8\xcc\xbb\xb5\x2c\xeb\x62\xe5\x08\x2e\xbb\x27\xae\xfe\xfc\xc7\x83\x2c\x66\xc1\x9a\x45\xae\x4e\x9b\x8b\x4f\x26\x70\xcc\x13\xb6\xef\x7d\xc4\xeb\x1c\xd3\xfc\xf6\x38\xd5\xf2\x5b\xe2\x2a\xf0\x7d\xec\xfa\x98\x27\x04\xac\xd7\x79\x26\xb2\x72\x6f\x60\x6c\x15\x58\xb7\x9f\x10\x9f\xd9\x8c\x65\x76\x24\xe2\xe1\xdc\x15\xf2\x48\x4b\x85\xcf\xbb\x47\x92\x3e\xd4\xbb\xd4\x4e\xaa\xaa\x9e\x6d\xa5\xf9\xad\x9b\x87\x92\xe4\x59\xfd\x07\xe5\x96\xf7\x91\xc5\x6e\x24\x75\xd5\xc0\x65\x2a\x6f\xde\x9c\x9a\x01\x47\x99\x2a\xb3\x43\x77\x9a\x9a\x5b\xe4\x87\x36\x0b\x69\xab\xa2\x6e\xf2\xd1\x34\x7d\xb9\xdd\x09\xb8\xaf\x06\xad\x08\x2b\x4e\x09\x03\xbe\x98\xca\xa4\xd3\x45\x85\xad\x2f\x76\x22\x11\x98\xe4\xe1\xdf\x76\xba\x72\x6c\x91\x9a\xda\x9a\x7d\x50\x81\x9f\xaa\x62\x4d\xd6\x6e\x2e\xca\xaf\x7e\xe0\x21\x60\xd7\xb9\x1a\xc4\xf5\xe1\x70\x02\x72\x0b\x6a\x46\xcd\x6d\x5d\x29\x6a\x90\x76\x7f\x05\x00\x00\xff\xff\x0c\xd3\xc1\x16\x56\x08\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 2134, mode: os.FileMode(420), modTime: time.Unix(1461140015, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md": readmeMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

