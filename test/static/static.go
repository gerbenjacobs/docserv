// Code generated by go-bindata.
// sources:
// README.md
// test/TEST.md
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x56\xdd\x6e\xdc\x36\x13\xbd\x8e\x9e\x62\x3e\xfb\x66\xd7\xf8\x42\xe5\xb6\x2e\x7a\x11\x34\x69\x13\xa0\x0e\x82\xd8\x41\x10\x2c\x0c\x8b\x2b\xcd\x4a\xb2\x25\x52\x20\x29\x6f\x17\x41\xde\xbd\x87\x3f\x5a\x29\xf1\x4f\x04\x18\xe0\x6a\xc4\xe1\x99\x39\x67\x0e\x7d\x4a\x95\x2e\x2d\x9b\xfb\x2c\x4b\x0b\x6a\x2d\x49\xfa\x5b\x77\x52\xd5\x34\xc8\xf2\x4e\xd6\x4c\xae\x91\x8e\x0e\x7a\xa4\x52\x2a\x6a\x95\xe3\xda\x48\xc7\x7e\xa5\xfd\x6b\x43\x83\xd1\xb7\x5c\x3a\xc2\xef\x9a\x15\x87\xa8\xf4\xb9\xc7\x9e\x95\x93\xae\xd5\x8a\xb6\x46\xef\x71\x82\xc8\x2e\x99\x69\x53\x6b\x44\xaf\x57\x8d\x73\x83\x3d\xcf\xf3\xf0\x53\x68\x53\xe7\x75\xeb\x9a\x71\x2b\x4a\xdd\xe7\x35\x9b\x2d\xab\x5b\x59\xea\xad\xcd\x13\xbe\x35\xed\xb4\xa1\x5e\x1b\x7f\x3c\x96\x7d\x48\x2e\xb2\xec\xbd\xa3\x46\x5a\x72\x7b\x8d\x68\xc5\xf6\x77\x32\x2c\xab\x16\x55\xb8\x86\x8f\x50\x2c\xed\x8c\xee\x69\xd7\x76\x6c\x0f\xd6\x71\x4f\xc8\x96\x20\xfb\x6f\xad\x07\x5b\x52\xa9\x87\x96\x2d\xed\x81\x25\x03\xd4\x97\xdb\x56\x55\xd2\xc9\x05\xde\x19\xe5\xad\x63\x1e\xf7\xac\xf2\xf9\xbb\x75\x96\x9d\x9e\xd2\x7b\x85\x6c\x5d\x97\x65\x45\xed\xdb\xe2\xe8\xe5\x48\xbf\xa8\xae\x40\x1d\xbb\xd0\xe9\x01\x04\x10\xba\x36\xda\xa9\x84\x04\x4d\x6e\xdb\xae\x75\x40\xf7\x7f\x92\x9d\x45\xb1\xf2\x0e\xb1\x11\xfd\x40\xf3\xdb\x78\x24\xcd\x50\xc4\x53\xc7\x3f\x02\x3b\x17\x42\x14\x01\xfa\x67\x0b\xda\xb3\xec\xec\xec\xaf\xb9\x51\xbe\xab\x67\x67\x48\x57\x20\x61\x56\x59\x3a\xff\x63\x52\x8f\xf8\xc0\xfb\x37\xba\xbc\xc4\x72\xb5\xb9\xb6\xce\x00\xf3\xb7\x93\x4f\x6f\x5f\xbf\xb9\x78\x2b\xfa\xea\xe4\xfb\x1a\xdf\x8b\x4f\xa3\x5a\xad\xfd\x76\x9f\xf8\x32\x56\x73\x4c\x2a\xf2\x58\x9f\xb0\x0d\x6d\x3c\x3d\x83\x74\xcd\x75\x04\x74\x85\xea\xe5\x56\xdf\xa3\xce\xd2\xb4\x83\x03\x2f\xa8\xb1\xd4\xea\x9e\x8d\x8b\x02\x9c\xf9\x45\x17\xe4\xa2\x7e\x48\x79\xda\x15\x54\x1c\xb6\xb6\x7d\xeb\xa2\x44\x3b\x5d\xca\x6e\x29\x87\x7d\xc3\x2a\x4a\x5d\xf7\x03\x5e\xc7\xf4\xda\xb4\x75\xab\xf0\x25\x84\x0e\xed\xf7\xe8\xea\xd7\x34\x0e\x90\xca\x01\xa9\x31\x36\xd3\x31\x3f\xcd\xc4\x6a\x1a\x9c\xb2\xc1\x4c\x71\xe0\x72\x1a\x2c\x25\x7b\xa0\x50\x15\xe9\xd1\x0d\xa3\x0b\x40\xd6\xe1\xc5\x68\x21\x70\x27\xe8\xe6\xe6\xe2\x07\x82\xfb\x41\x1b\x17\xcf\x4b\x49\xc4\xcd\xcd\x44\x4a\x8a\xfa\xd6\xe5\x4e\xa7\x8e\x66\x0f\xb9\x8a\xcd\x9f\x18\xeb\xe5\xb0\x89\x9c\x5d\x6f\xae\xb7\x07\xc7\x4b\xea\xce\x93\xee\xc4\xc5\x68\xdd\x6b\x6b\xd9\xad\x16\xd1\xf5\x03\x66\x21\x9e\x3f\xb5\xda\xb5\xf5\x84\xc9\x1d\x06\xa6\x74\x54\x8c\x20\xa3\x19\xd1\x98\x6f\xd9\x8b\xb7\xaa\x1a\x34\x6c\x84\xd2\x13\x61\x60\x91\xe7\x74\x8c\xa1\xec\xae\x05\x39\xca\xaf\x56\x15\xef\xe4\xd8\xb9\x73\x0a\x33\xb3\xce\x5e\x7c\xb6\x9c\xc4\x14\x9f\xad\xd6\x5d\x58\x20\xc7\x97\x86\xd1\x6e\xe3\x37\xfa\x86\x2e\x44\xb7\x48\xb4\xc3\x1c\x31\x12\x01\xa4\xa5\xc5\x33\x29\xd9\x27\xf2\x12\x9c\x54\x69\x83\x05\xfd\x60\x6e\xd9\x8b\x77\xda\xba\xe5\xe6\x65\x25\x7e\x73\xe3\xe3\x83\x04\x3b\x7a\x17\x24\xf0\xee\xea\xea\x63\xaa\x0b\x00\x67\x34\x27\x27\x80\xf2\xd1\xd3\xf8\x4c\xb6\x44\xf3\xaf\xb3\xfd\xf6\xea\xd5\xab\xd8\xa3\x77\x6d\xdd\x74\xf8\x0b\x36\xf7\x4c\x8f\xec\x01\x35\xfd\x4b\xcd\xf2\xf3\x39\x1f\x98\xf3\xad\xba\x0c\x1f\x5d\xba\x03\x06\xe4\x31\x7c\x36\x44\x52\x46\xdf\xad\xe7\xb3\x56\xd2\xdc\x8d\x1d\x6c\xf3\xfb\x51\x44\x57\xdc\xc3\x02\x1d\x4c\xe8\x7f\x1b\x0c\x16\xb3\xb2\x8d\x76\xb3\x01\x1b\xb9\x17\xd1\xcd\x70\x84\x81\x17\xa0\x72\xf7\xa4\xaf\xa6\x51\xb8\xf1\xcc\xe7\x73\x3a\x31\xa8\x1a\x5e\x9d\xd4\xe9\x47\x3e\x99\xbe\xbf\xbc\x22\x38\x72\x09\x08\xbc\x95\x0a\xc3\x16\xa3\x5d\xb2\xcd\xa7\xd7\xa2\x71\x7d\x57\x08\xfa\xfa\xf3\x90\x63\x40\xe7\xad\xd1\xd3\xf7\xad\x6d\xe2\x4d\x85\x60\x34\xf6\x62\x76\xaa\x82\xac\x3e\x5e\xb2\x66\x54\x81\xd7\x62\x3b\xb6\x5d\x05\x53\x2c\x92\xbd\x08\xdf\x9d\x53\x8a\x04\xd0\x92\xd4\x2c\xfb\x02\x2f\x81\x4d\xc4\xcc\x9b\x63\xaf\xc5\xad\x9d\xfb\x76\x7c\x7b\x6b\xfd\x75\xbb\x0e\x7e\x59\x55\x8f\x12\x34\x39\xd9\xd1\x5c\xc5\xf1\x7a\xda\x4b\x35\xff\x47\x00\x53\x88\x60\x17\xb2\x28\x7c\xbf\xc2\xcb\xd4\x5d\x8e\xc3\x5f\x84\x03\xd5\x21\x49\x26\x9b\x4d\x19\x37\x79\xd9\x84\x50\xd2\x74\x10\x11\x6c\xb5\xd1\xfb\x52\x5a\xae\x50\x12\x1b\x7e\xb2\x94\xc4\x71\x5e\x71\xaf\xf3\x75\xe6\x4d\xd4\x0f\xdd\xc3\x7d\x65\xa5\xb0\xc3\x4b\xa5\x6b\xb7\x46\x1a\xdc\xa5\xf9\xb2\x59\x6b\x5a\x7d\xd0\x8e\xcf\xe9\x1f\xbd\x87\xb4\x70\x74\x70\x64\x0b\xbf\x05\x1c\xc3\xe0\xb4\x44\xd6\xa0\x93\x4a\xda\x86\xe1\x42\xff\x05\x00\x00\xff\xff\x2d\x64\xf9\x5d\x49\x09\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 2377, mode: os.FileMode(420), modTime: time.Unix(1463135195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTestMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcd\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xc0\xad\xf4\x0e\x05\x0b\xba\x70\x23\x5e\x60\x6c\x9e\x6d\x31\x99\x91\x64\x24\x78\x7b\x03\xae\xba\x7c\xf0\x3e\xfe\x03\x46\x35\x5f\x59\xe0\xac\x8e\x2c\xe5\x15\xad\x29\xde\xb2\x30\x84\x33\x53\xb2\x23\x2e\x90\x0c\x41\xe5\x6c\x1a\xf7\x1f\x7c\x2a\x23\x9e\xf6\xf7\x9b\x2e\x43\x08\xf7\xf2\x45\x6d\x9b\xcf\x6b\xdf\x78\xd0\x1b\xa9\xc8\x84\x74\xdd\x5b\xb8\x4d\xe3\xe9\x3a\x0d\xbf\x00\x00\x00\xff\xff\x33\x2e\xeb\x5f\x7c\x00\x00\x00")

func testTestMdBytes() ([]byte, error) {
	return bindataRead(
		_testTestMd,
		"test/TEST.md",
	)
}

func testTestMd() (*asset, error) {
	bytes, err := testTestMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/TEST.md", size: 124, mode: os.FileMode(420), modTime: time.Unix(1460463742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md": readmeMd,
	"test/TEST.md": testTestMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"test": &bintree{nil, map[string]*bintree{
		"TEST.md": &bintree{testTestMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

