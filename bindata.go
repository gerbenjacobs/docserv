// Code generated by go-bindata.
// sources:
// etc/doc.html
// DO NOT EDIT!

package docserv

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _etcDocHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x59\xfd\x72\xdb\xb8\x11\xff\x3f\x4f\x81\xd3\x5d\xc7\xf2\x45\x24\x6d\x29\x76\x1c\x59\xf6\x5c\xce\x97\x5c\x3a\x93\x49\x32\x75\x6e\x3a\x9d\xde\xfd\x01\x92\x20\x09\x1b\x02\x58\x02\x94\xad\xa4\x9e\xe9\x6b\xf4\xf5\xfa\x24\xdd\x05\x45\x19\xfc\x92\x9c\x69\xe9\x19\x51\xc2\xc7\x6f\xbf\x17\xbb\xf0\xe2\xbb\x5f\x3e\x5e\x7d\xfe\xdb\xa7\x37\x24\x33\x4b\x71\xf9\x6c\x81\x2f\x22\xa8\x4c\x2f\x46\x4c\x8e\x70\x80\xd1\xf8\xf2\x19\x81\x67\xb1\x64\x86\x92\x28\xa3\x85\x66\xe6\x62\xf4\xdb\xe7\xb7\xde\xd9\x68\x33\x65\xb8\x11\xec\x32\x56\x91\x66\xc5\x6a\x11\x54\x3f\xab\x29\x6d\xd6\xf5\x77\x7c\x82\x1f\xb7\x5f\xc9\x8f\xe4\xd7\x82\xc7\x5c\x2f\xdd\xa1\xd7\x44\xf3\x65\x2e\xd8\x84\x14\x4c\xe7\x4a\x6a\xbe\x82\xef\x54\xc6\x24\x83\x8f\x35\xb9\xba\xbe\x26\x29\x6c\x23\xe1\x9a\xfc\x14\xa9\x70\xdd\xda\x9f\x19\x93\xeb\x79\x10\xa4\xdc\x64\x65\xe8\x47\x6a\x19\x6c\x56\x05\x69\x87\x5a\xf0\xcc\x61\x8c\x7c\x02\x8a\xc0\x3f\x23\x5a\x2d\xe1\x83\x4a\x6e\xd6\xb8\xa6\x5e\xe2\x23\xc0\xe4\xf1\x67\x09\x0b\xc8\xd7\x47\x38\x78\xbc\x3b\x16\xde\x72\xe3\x85\xea\xde\xd3\xfc\x0b\x97\xe9\x9c\x84\xaa\x88\x59\x81\x43\xe7\xcd\xb5\x4b\xf5\xe5\x49\x0b\xf7\xad\x79\x68\x48\x71\xcd\x0c\x29\xf3\x4a\x86\xa2\x14\x4c\x13\xa3\x48\xaa\x56\xac\x90\xc4\x64\xac\x52\x5e\x5b\xaa\x96\x18\xa0\xa6\x5c\xd0\x35\x90\x13\x2a\xba\x6d\x72\x13\x09\x46\x0b\x64\xc4\x64\xbd\x2c\x54\x78\x7d\xca\x49\x84\xa2\x66\x4e\x04\x4b\x4c\x13\xf2\x8e\xc7\x26\x9b\x93\xe3\xa3\xa3\x3f\x35\x27\x72\x1a\xc7\x56\xec\xe3\xa3\x7c\x50\xe0\xcf\x19\xd7\x84\x49\x5d\x16\x28\x2b\x48\xa8\x4a\xc3\x0a\x92\x96\x06\x5e\x9a\xd0\x82\x11\xf6\x8f\x92\x0a\xd4\x03\x4e\x8f\x63\x55\x86\x82\xc5\x87\x84\x4b\xf9\xb8\xd0\xef\x2a\xc5\x0a\x31\x4f\x78\xa1\x8d\x17\x65\x5c\xb4\xd5\xb4\x61\xcf\x43\x89\xe6\x64\x3a\xc4\xa3\x0b\x26\xe8\x1e\xac\x82\xa7\xd9\x2e\x30\x10\xf8\x03\xd3\x86\xc5\xd6\x90\x20\x9e\x28\x20\x44\xd7\x10\x1d\xe0\xb8\x1b\x10\x10\x53\x95\x69\x36\x01\x27\x00\x6d\x9b\xff\xfc\xeb\xdf\x9a\xc8\xf2\x96\x11\x30\x89\x2b\xa4\xb5\xd1\xb7\x09\x79\xd4\x2f\xa1\x83\xf4\x54\x09\x77\x22\xa1\x6c\x0d\x9e\x2e\x7b\x3d\xaa\x86\x34\x2a\x7f\x0a\xa0\xc3\xda\x6e\x3c\x70\x6e\xa3\x96\x43\x90\x60\x82\xf7\x10\x64\x39\x53\x90\xa7\x2a\xc5\xda\xc0\xaa\xfc\x28\xa8\x8d\x00\xa9\x07\xe6\x0d\x13\x6b\x70\x34\x02\xa9\x53\x95\xb8\x5e\x25\xe4\x8e\xae\x75\xc3\x10\x52\x79\xb5\xbb\x5a\xb6\x5a\x49\xc6\x9d\xef\x65\x18\x38\x25\xdf\x41\xda\x54\x85\xa1\xd2\x0c\x31\xfd\xd7\x82\xe6\x39\x72\x46\x0d\xb0\xb3\xa4\xf7\x7c\x59\x2e\xab\xe0\x23\x10\x42\x2a\x37\x5c\x49\x88\x13\x97\xb3\x3b\xd8\xd3\x49\x7c\xf8\xb3\x9a\x69\x72\x03\x90\xde\x26\x96\x5f\xbd\x3c\xcb\x5b\x69\x6c\x49\x8b\x94\x4b\x64\x95\x96\x46\x0d\x32\x69\xd9\x89\xc0\x54\x9a\xa1\x77\x83\x0b\x5b\xd7\xd6\x19\x08\x87\x47\x00\x81\x4c\xa6\x81\x51\x74\xe9\x65\xc8\x0a\x88\x04\xaa\x49\x52\xd0\x08\xd9\xd7\xee\x59\xf0\x56\x15\x84\xdd\x53\x34\xc3\x9c\x24\xf0\x83\x56\xd9\xcf\x5a\xfe\x38\x98\x91\xb1\x92\x68\x3b\x5e\x40\x32\x00\xbb\xa0\x15\x73\xc8\x17\xd2\x54\x5a\x99\xb8\x60\xf6\x58\x5a\x13\x50\x21\x7c\x5a\xfe\x2e\x46\x77\xde\xb1\x37\x1b\xd5\x89\x85\x09\xb6\x84\xbd\x7d\x89\xe4\x2e\x53\x78\xa4\xd5\xbf\x60\xdb\x71\x4b\x77\xbd\x39\xb0\x9b\x44\x32\x2a\x92\x06\xce\xb4\x1f\xe7\x64\x37\x0c\xc8\xed\x59\xb9\x1b\x58\xb3\x7e\xac\xd9\xcc\x9f\xcd\x66\xd3\x9d\x80\xe6\x4e\x55\x80\xda\x41\x9c\x0e\x21\x9e\x9e\xfa\xa7\xa7\xa7\x27\x7b\x59\x84\xb4\x5d\x80\xd7\x4f\xfa\xe6\x12\x55\x82\x43\x34\xf8\x7f\xd1\x4f\x6d\xba\x9b\x90\xc9\x0a\xb6\x25\xa5\x3b\xb4\xaa\xe9\x8a\x9a\x2b\xdc\x6c\x88\xdc\xcb\xfd\x72\x25\x3c\x69\xb1\x7e\x32\xc0\xfa\x6e\x33\xa2\xd6\x2d\x56\x53\xeb\x03\x60\x2f\xf6\x80\x55\x82\xb6\xe1\x66\x43\x70\xa7\xbb\xe1\x50\x63\x5d\xb4\x17\x43\x68\x67\xbb\xd1\x52\x25\x62\x26\x3d\xbd\xa4\x42\x38\x70\xa9\xd7\xce\x88\xb5\xcf\x9e\xf9\xd3\x97\xc7\xa7\xfd\x98\x90\x66\x7e\xb5\x78\x44\x33\x9b\x35\xe6\xc4\x02\x43\x31\x90\x73\x16\xb1\x9e\x00\xde\xd0\x17\x90\xc3\x58\x83\xbe\x18\x50\xce\xb1\xff\x72\x7a\x36\x7b\x32\x7d\x0b\xec\x90\x77\xd7\x5e\x61\xc5\x95\xf0\x7b\x42\x13\x2c\x6c\x18\x24\xc0\xf5\x86\x85\x3d\x75\xdc\x8f\x5f\x14\x1e\x63\xc7\xc3\x9a\x9d\x87\x0c\x12\x63\x2d\xd2\xbc\xa2\x30\x50\x0c\x1a\x0a\x65\x53\xab\x18\x54\xd2\x40\xca\x9b\x93\xd1\xa8\x39\x21\x38\xb8\x79\xc6\x76\x1e\xf5\x83\x14\xf7\x95\x98\xa0\x93\xdf\x0c\x17\x58\x9e\xd7\x07\x85\xab\x08\x2a\x78\x2a\xbd\x08\xf8\xea\x20\x1b\x76\x6f\x3c\x3b\x3f\x27\xd5\x82\x7e\xd6\x2a\x08\x2c\x79\x76\x00\x34\x0b\xd9\xee\x76\x5b\xe8\xec\xd8\x6f\xe7\xfb\x01\xf2\x52\x88\x3e\xf2\xbd\x25\x74\x67\x63\x1f\xe1\xcd\xce\x61\x9a\x01\xf6\x5e\x79\xa1\x72\x56\x80\x5e\xab\xd3\x32\x64\x58\x74\x40\x27\x26\xa1\xe9\xc0\xca\x01\x0e\x49\xbe\xa4\x29\x28\x1c\x4a\x1a\x3c\x46\xf5\x1c\xbe\xb9\x84\x0c\x56\xe3\x50\xe0\x90\x90\xa7\x95\x47\x47\xc6\x56\xe6\x58\x87\xdf\x94\xda\x60\x5f\xc7\xbf\xc0\xa9\xcd\xab\x03\x17\x51\x5c\x80\x90\x41\xe1\x04\xeb\xeb\x88\xec\x14\xac\x7c\x99\x0e\xd7\x1d\x83\xe7\x27\x88\xf7\x8e\xc7\xdb\x43\x5a\x93\x52\x57\x95\x32\xb0\x6b\x9d\x08\x1b\xca\x98\x25\xb4\x14\xcd\x22\x59\x49\xb1\xf6\x94\x84\x6e\x2d\xe4\xd8\x4d\x0d\x04\x87\xc4\x52\x62\x7f\x0d\xf6\x97\x6d\x53\x4b\xae\x4d\x99\x24\x2e\xa9\x9f\x96\x2c\xe6\x94\xe8\x08\xf2\xb0\xb4\x2d\xef\xd8\x91\xec\xe4\x14\x2a\xaa\xc3\x16\x79\xec\xf7\x0c\x8d\x6e\x61\xf5\x1a\x44\xb1\x02\x41\x75\xc7\xb5\x84\xa2\xdf\x90\x04\xbd\xa1\x2a\xf0\x94\xdc\x6a\xb4\x22\xa0\x1b\x40\xf0\x20\xc1\x58\x31\x2d\x0f\x0c\xfa\xc1\x0a\xb5\x85\x06\x82\xe2\x53\x23\x0d\x2c\x8c\x1d\x3d\x54\x4a\x73\xd8\xb7\xda\xb2\x31\x2d\x95\x19\xfb\xfd\xdb\x0e\x07\x2a\x6f\x7c\x1c\x13\xf6\x6a\xb2\x7e\x76\xb5\x5d\xed\x35\xbd\xed\x54\xcb\x2c\x96\xf1\xc7\x36\x61\x90\xbf\x56\x27\xf4\x04\xb2\xfb\xa8\xa2\xf9\xc0\xd9\x0d\x07\x87\x9f\x90\xb5\x2a\xab\x08\xb9\x03\xb1\xb1\xa8\x0c\x19\xf8\x57\x92\x30\x5b\x91\xd6\x06\xac\xcd\xd7\x51\x7d\x95\xcf\x86\x5d\x15\x9f\x6e\xfe\x1b\xd4\x74\x5b\x41\x19\xf8\xc3\x6e\xf0\xfd\xb1\xd0\x87\xbb\x3b\xbe\x1a\xb8\xf6\x36\x62\x07\x70\x0f\x09\xd0\xf0\x9b\xfb\x1c\x5d\x1b\x5d\xd9\xf6\x2c\x90\xd6\x38\x86\x06\xd4\x73\x20\x3e\xa8\x75\x73\xf6\xf6\xe8\xb5\x2f\x22\xb9\xdc\xe6\x9a\xe3\xb3\xa3\x6e\x48\xfa\x30\x0b\x68\xad\x9e\xc9\xce\x54\x7d\x93\x9d\xee\x4a\xe9\x26\x31\x0b\xdc\xf5\xae\xa1\x0e\xaa\x2d\x3d\x7e\x2e\x02\xe7\xe6\x6d\x01\xc7\xf1\x2d\x24\x5e\x71\x31\xb2\xa3\x3a\x63\xcc\x8c\x08\x14\x7c\xc9\xc5\xa8\xbe\x31\x8b\x62\x79\xa3\xfd\x48\xa8\x32\x4e\x40\x25\xcc\xde\x9d\xd1\x1b\x7a\x1f\x08\x1e\xea\x20\x03\x97\x16\xe8\xd6\xfe\x8d\x0e\x5e\xf9\x33\xff\xa8\xa2\xa0\x83\xaf\x5f\x89\x7f\xa5\x64\xc2\x53\xff\x7a\x2d\x0d\xbd\xbf\xc6\x71\xf2\xf0\xe0\x83\xb2\xfc\x48\xeb\x51\xff\x5d\x20\x5e\x36\x4e\xe0\x94\x8f\xd7\x9d\x7c\xbe\x91\x73\xe0\x36\xa8\x35\x9e\x40\x11\xe2\x25\x74\xc9\x05\xf8\xc8\xe8\x1d\x13\x2b\x88\xa8\x88\x92\x0f\xac\x64\xe4\x3d\xb2\x3c\x9a\x38\xe3\x38\xec\x75\x87\xed\x72\x18\xb9\x82\xf0\x08\x0b\x3e\x21\xdb\x99\x09\x79\x5d\x70\x0a\xac\x6a\x2a\xb5\xa7\xe1\x24\x4c\x7a\xd3\xfb\xf7\x78\x59\xda\x2d\x66\x94\x50\x50\xcc\x7c\xff\xc6\x3e\xad\x9b\x3d\xc8\x8f\x69\xa1\x4a\x19\x7b\xf5\xb2\xd3\xf0\xe5\x34\x9c\xf6\xe3\x4b\xba\x6a\x81\xf7\x00\xd0\x57\xf8\xd7\x5f\x1d\x58\xfb\x79\x8f\x9b\xf6\xa3\x25\xaf\xf0\xaf\x9f\x1d\xb4\x07\x8b\x3d\xc1\x75\x3b\x5b\xe2\x90\x67\xad\xed\x99\x75\xce\xaa\x8c\xb0\x1f\x44\xf0\x01\x47\xc0\xeb\x3f\xe7\xc3\x1b\xbc\x0e\xf4\x63\x15\x95\x78\xbe\x7b\xd6\xe3\x7b\x6a\xaf\x18\xca\x8b\x82\x56\x45\x77\x93\x2b\x7c\x6a\xb1\xa7\x6c\x7a\xe2\x5a\x01\x9f\xad\xfb\x9d\xec\x25\x0e\x95\xf2\xae\x3a\xe1\x7c\x28\x56\x17\x41\x75\xdf\xbe\xc0\xa0\x80\x57\xcc\x57\xf5\x55\x03\xe6\x8e\x3a\x8e\x70\x98\xc7\x10\xb9\xd6\xdf\x46\xf5\x12\x7b\x6c\xd9\x9b\x86\xd1\x63\x90\x2d\xb2\xe3\xcb\x5f\x36\x7c\x59\xb1\x81\xc6\xf1\x06\x27\x00\x20\x24\x5a\xbd\xf6\x10\x03\xe7\x6b\x52\xda\x36\xb2\x2e\xb5\x52\xd8\xc5\x8e\x55\x9d\x59\x7c\x20\x59\x14\x54\xa6\x8c\xfc\x70\x3b\x21\x3f\xac\xc8\xfc\x82\xf8\xc0\xdf\x5b\x9b\xfb\x1f\x1e\x1a\x6b\x21\x6d\x5d\x2e\xe8\x26\x4d\xdd\xd0\x15\x85\x44\xcc\x73\x33\x5f\x29\x1e\x8f\x8f\x0e\xb7\xec\x34\x8c\x3e\x22\x31\x35\xd4\xab\xc7\x2e\x46\x40\xf1\x87\x5b\xf2\x4f\xe0\x0b\x8f\xd1\x87\x87\xd1\x65\x35\xf2\xf0\xb0\x08\xe8\xe5\x02\xb2\x5b\x87\x43\xa8\x77\x5d\x5e\x16\x41\x29\x1a\x2a\xdb\x2a\xc6\xd5\x87\xd3\xf0\x92\x76\xa0\x39\x4a\x78\xaa\x02\x5c\x7c\xd7\xb1\x46\x56\xc1\x5d\xa1\xda\x32\x00\x74\x43\x84\x2d\xe3\x5d\x19\x9b\x8e\xf0\x6c\x51\xa9\x99\xe8\x22\xfa\x5f\x4e\x87\xc7\x21\x3c\x06\x6e\xe0\x14\x00\x3f\xb7\xc8\x97\xff\x0f\x12\x53\x20\x81\xff\xa9\x2a\xb1\x1d\x09\x52\x35\x4c\xe5\x32\x13\x80\xcb\xc1\x46\xef\x6a\x08\x88\xe3\x8f\xf2\xbd\xa2\xf1\xf8\xf0\xbc\xbb\xde\x2a\x65\x45\x0b\xec\x78\x35\xb9\x20\xb5\xfa\xfd\x94\x99\x37\x9b\xfe\xe1\xe7\xf5\x15\xda\xe6\x03\x5d\xb2\x71\xd3\x3e\x87\xe7\xdb\xfd\xe8\x8f\xdf\x06\x60\x3d\x18\x10\x2c\x44\x10\x90\x8f\x39\x14\x1e\xf6\x22\x9c\xa8\x28\x82\x46\x4a\x46\xcc\xce\x21\x6b\x7f\x3f\xfa\xc3\xb7\x99\xc3\xdf\xa4\x17\x20\x75\x60\x8b\xa4\x83\x8a\x07\x4b\x1f\x57\x45\x35\x29\xf2\xfc\x82\x8c\xba\xee\xf9\x48\xf0\x75\x1c\xe3\x0d\x83\x34\x36\x89\x33\x89\x77\xce\x50\x8a\x5a\xa4\x86\x5c\xef\xa0\x1c\xc2\x6e\xe2\x02\x4a\x29\x69\x6f\x31\xc8\xd8\xad\x85\xa2\x0c\xbd\xfc\x3d\xac\x1c\x63\x93\x75\x78\xde\x9a\xf9\x4c\x43\x77\xe2\xa1\x7a\x61\xdf\x39\x46\x12\x1c\x80\x8f\xce\xe1\xb5\xa8\x68\xfb\x82\xc9\xd4\x64\x30\xf2\xfc\xb9\x4b\xa6\x12\x91\xff\xe1\x43\xc6\x79\x83\x7c\xbf\xdf\xb0\x3d\x3e\x88\x04\x07\x4d\x4c\x5c\x6e\x27\x24\xa1\x42\xb3\x9a\xe6\x56\xea\xb7\x1b\x11\x2a\x11\xb7\x02\x3d\x72\xca\x5c\x9a\x96\xbf\x18\x18\x64\x68\xd0\xd7\xc6\x14\x3c\x2c\x0d\x9a\xd1\xcd\x3c\x23\x47\xe4\x3e\xb1\xd0\x82\x43\x52\xe1\x03\xfd\xf1\xd8\xae\xc9\xa8\xfe\x78\x27\x3f\x6d\x5a\xf3\x31\x3f\x6c\xaf\xdc\xfa\x03\xef\xf1\x07\x3c\x70\x0e\x76\xd7\x8a\xf8\xf4\xb8\xe8\xcf\xeb\x3f\xc7\x63\x1e\x1f\xee\xf6\xb1\x8d\x12\x5b\x3a\xb3\x76\x6f\x28\xed\x9b\x2d\x5b\xeb\xa0\x5a\xf4\x24\x25\x6c\x9d\xe1\xd1\xdf\x2f\x7a\x06\xfd\x82\x81\x24\x11\x1b\x07\xbf\x87\xed\x50\xf8\x3d\x0c\x26\xe4\xe0\xe0\x70\xbf\xc6\xd8\x13\xa2\xaa\xda\xe1\x64\x98\x60\x73\xb2\x07\xf6\x1f\xee\xff\x0d\x00\x00\xff\xff\x4e\x8b\xc2\x41\x80\x1f\x00\x00")

func etcDocHtmlBytes() ([]byte, error) {
	return bindataRead(
		_etcDocHtml,
		"etc/doc.html",
	)
}

func etcDocHtml() (*asset, error) {
	bytes, err := etcDocHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/doc.html", size: 8064, mode: os.FileMode(420), modTime: time.Unix(1460463642, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"etc/doc.html": etcDocHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"etc": &bintree{nil, map[string]*bintree{
		"doc.html": &bintree{etcDocHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

