// Code generated by go-bindata.
// sources:
// etc/doc.html
// DO NOT EDIT!

package docserv

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _etcDocHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\xdd\x72\xdb\xb8\x15\xbe\xcf\x53\x60\xb9\xe9\xd4\xc9\x88\xa4\x25\x25\xb2\xa3\x95\x35\x9b\xf1\x26\x9b\x8b\x4c\x77\xa7\xce\x4e\xa7\x97\x20\x09\x92\xb0\x41\x80\x25\x40\xd9\x4a\xc6\x33\x7d\x8d\xbe\x5e\x9f\xa4\xe7\x80\xa2\x04\xfe\xd9\xe9\xb4\xf4\x8c\x2c\x01\xe7\x1f\xe7\xe7\x03\x37\x3f\xfc\xf2\xdb\xf5\x97\xbf\xff\xfe\x81\xe4\xa6\x10\xdb\x17\x1b\xfc\x47\x04\x95\xd9\x95\xc7\xa4\x87\x0b\x8c\x26\xdb\x17\x04\x9e\x4d\xc1\x0c\x25\x71\x4e\x2b\xcd\xcc\x95\xf7\xc7\x97\x8f\xfe\xa5\x77\xd8\x32\xdc\x08\xb6\x4d\x54\xac\x59\xb5\xdb\x84\xcd\xcf\x66\x4b\x9b\x7d\xfb\x1d\x9f\xf0\xf5\xf1\x2b\x79\x4d\x7e\xad\x78\xc2\x75\xe1\x2e\xbd\x27\x9a\x17\xa5\x60\x33\x52\x31\x5d\x2a\xa9\xf9\x0e\xbe\x53\x99\x90\x1c\x3e\xf6\xe4\xfa\xe6\x86\x64\xc0\x46\xa2\x3d\xf9\x39\x56\xd1\xbe\xc7\x9f\x1b\x53\xea\x75\x18\x66\xdc\xe4\x75\x14\xc4\xaa\x08\x0f\x54\x61\x36\xd0\x16\xbe\x70\x0c\x23\xbf\x83\x46\xb0\x9f\x11\xad\x0a\xf8\xa0\x92\x9b\x3d\xd2\xb4\x24\x01\x0a\x98\x9d\x7e\xd6\x40\x40\xbe\x9d\xc4\xc1\xe3\xdf\xb3\xe8\x8e\x1b\x3f\x52\x0f\xbe\xe6\x5f\xb9\xcc\xd6\x24\x52\x55\xc2\x2a\x5c\xfa\xa9\x4b\x5b\xa8\xaf\xdf\x45\xf8\x1c\xcd\x63\xc7\x8b\x1b\x66\x48\x5d\x36\x3e\x54\xb5\x60\x9a\x18\x45\x32\xb5\x63\x95\x24\x26\x67\x4d\xf0\xfa\x5e\xf5\xdc\x80\x30\x95\x82\xee\x41\x9d\x50\xf1\x5d\xd7\x9a\x58\x30\x5a\xa1\x21\x26\x77\x4d\xe8\x8a\x1b\x8b\x4d\x2a\x14\x35\x6b\x22\x58\x6a\xba\x12\xef\x79\x62\xf2\x35\x99\x9f\x9f\xff\xa9\xbb\x51\xd2\x24\xb1\x5e\xcf\xcf\xcb\x49\x7f\xbf\xe4\x5c\x13\x26\x75\x5d\xa1\xab\xe0\xa0\xaa\x0d\xab\x48\x56\x1b\xf8\xa7\x09\xad\x18\x61\xff\xa8\xa9\xc0\x30\xe0\xf6\x59\xa2\xea\x48\xb0\xe4\x15\xe1\x52\x9e\x08\x83\x61\x4c\xac\x13\xeb\x94\x57\xda\xf8\x71\xce\x05\x44\xa9\x35\xc9\x47\x2f\xd6\x64\x81\x76\x8d\x3b\xbf\x16\x74\x84\xad\xe2\x59\xee\xf0\xb9\x7e\xfc\x85\x69\xc3\x12\x7b\x3c\x60\xb5\xa8\xa0\xf0\xf6\x90\xf3\x90\x8e\x07\x66\xb0\x5e\xd5\x59\x3e\x83\xa3\x85\x20\x9a\x7f\xff\xf3\x5f\x9a\xc8\xfa\x8e\x11\x88\xb4\x6b\xbb\x0d\xfd\xf3\xb6\x9f\x77\x0c\x77\x98\x9e\x32\x7c\x8c\x09\x2d\xee\x68\xda\xb6\xc7\x7f\xe4\x36\xaa\x7c\x82\xd7\x51\x38\x64\x85\x3c\x33\xaa\x38\x70\xbb\xf1\xfa\x0c\x79\x5e\x32\x05\xad\xa2\x89\x82\xcd\xed\xe6\x2c\xc3\x36\x62\x50\xfd\xb0\x6f\x98\xd8\xc3\x61\x13\xe8\x5e\xaa\x46\x7a\x95\x92\x7b\xba\xd7\x9d\xa8\x49\xe5\xb7\x29\x63\x4d\xe8\xd5\xb9\xbb\xff\x6d\x3c\x49\xcf\xc9\x0f\xd0\xb9\x54\x65\xa8\x34\x53\xc9\xfa\xb7\x8a\x96\x25\x5a\x46\x0d\x98\x53\xd0\x07\x5e\xd4\x45\x53\x00\x04\xd2\x58\x95\x86\x2b\x09\xb9\xea\x5a\x76\x0f\x3c\x83\xde\x83\x3f\x9b\x9d\xae\x35\x20\xd2\x3f\xd4\xd3\xbb\x8b\xcb\xb2\xd7\x49\x0a\x5a\x65\x5c\xa2\xa9\xb4\x36\x6a\xd2\x48\x6b\x4e\x0c\xc7\xa2\x19\xa6\x22\xe4\x9b\xcd\x43\x9d\x83\x73\xd8\x85\x09\x34\x13\x0d\x86\x62\xfe\x15\x11\xab\x20\x6d\xa9\x26\x69\x45\x63\x34\x5f\xbb\xed\xf8\xa3\xaa\x08\x7b\xa0\x78\x0c\x6b\x92\xc2\x0f\xda\x34\x20\x7b\xca\xf3\x70\x49\xce\x94\xc4\xb3\xe3\x15\x14\x24\x9c\x0b\x9e\x62\x09\x35\x2b\x4d\x13\x95\x99\x2b\xcc\x4e\x86\x3d\x81\x10\xc2\xa7\xb5\xef\xca\xbb\xf7\xe7\xfe\xd2\x6b\x8b\x9b\x09\x56\x00\xef\x58\x31\xdf\xe7\x0a\xa7\x0a\xe9\x2f\x03\xff\x1c\xf2\xcd\x6d\x42\xc3\x8a\xce\xa9\x48\x1d\x5e\x97\x79\x71\x62\x7e\x3b\xca\x0b\x0e\xfa\xd6\xc1\xd9\x80\x77\x79\xe2\x5d\x2e\x83\xe5\x72\xb9\x18\x13\x60\xee\x55\x23\x40\xcf\xba\x02\x16\xae\x80\xd5\x2a\x58\xad\x56\x6f\xa7\x2c\x80\x16\x58\x41\xf6\xce\xc6\xf6\x52\x55\xc3\xc1\xce\xfa\xd6\xbd\x39\x09\x5f\x8c\xca\x35\x79\xc5\x8e\x92\xf5\x40\x74\xb3\xdd\x08\x47\xd3\x8f\xa2\x97\xae\xe8\x8b\x49\x93\x53\x9e\xb6\x56\xb9\x66\xbd\x75\xcc\x1a\x0d\x38\xc6\xcb\xf2\x0e\xe3\xe5\xf0\xbe\x19\xe7\x6d\x6c\x3e\x72\x3b\x36\x3b\xbc\xab\x51\x5e\xf4\xd4\x55\x7c\xe4\x7d\xe3\xf2\x5e\x8e\xf2\x66\x4a\x24\x4c\xfa\xba\xa0\x42\x74\xf4\x66\xbe\x76\x92\xe4\x32\x58\x5c\xcc\x57\x28\x00\x0b\xf5\x57\xcb\x44\x34\xb3\x75\xb7\x26\x96\x1b\x46\x5a\xc9\x59\xcc\x46\x4a\xe0\xa0\x44\x40\x17\x60\x3d\x25\xc2\x71\x6e\x1e\x5c\x2c\x2e\x97\x53\x4a\x2c\xb7\xa3\xc3\xed\x1c\xd7\x88\x0d\x52\xfe\x40\x68\x8a\x33\x98\x41\x9f\xd8\x1f\xb4\x3c\x83\x38\x5e\x7f\x55\xd8\xe5\xe7\x93\x90\x62\x1d\x31\x68\x1f\x60\x76\xf3\xab\x51\x30\x81\x5a\x0c\x85\x01\xdf\x43\x2d\x4a\x1a\x68\x0c\x6b\xe2\x79\xdd\x0d\xc1\x21\xd3\x72\xd6\x8e\xb7\x49\xf5\x63\x0a\x27\xa0\x90\x1b\x91\x3f\x0c\x17\x08\x23\xdb\x6e\xea\x86\x81\x0a\x9e\x49\x3f\x06\xb3\x50\x32\x31\xec\xc1\xf8\x76\x6d\x4d\x9a\xc5\x4e\x9e\x34\xd4\x38\xbb\xe1\x57\x97\xda\x42\xaa\x21\xad\x9d\xd9\x7d\x5a\xbb\xd8\x21\x2e\x6b\x21\x5a\xb9\x40\xec\xc2\xb4\x01\xd9\x41\xe4\x89\xec\x28\xce\x75\xfa\x3d\x29\x2b\x55\xb2\x0a\xfc\x6e\x5a\x7e\xc4\x70\x72\x02\xa2\x97\x00\x5e\x71\xfc\x41\xa7\xe7\x05\xcd\x20\x20\x30\x97\x71\x16\xe8\x35\x7c\x73\x83\x6b\x10\xd6\xc1\x94\x26\x11\xcf\x9a\x7c\x8b\x8d\x85\x78\x08\xe8\x6e\x6b\x6d\xf0\x7e\xc0\xbf\xc2\xe8\xe1\xcd\xd4\x40\x29\xae\x80\x88\xc1\xf4\x07\xfa\xb6\x28\x06\x10\x89\x17\xd9\xf4\xf0\xec\x82\xd1\xae\x7b\x9f\x78\x72\x9c\x34\x9a\xd4\xba\xc1\x66\x60\xae\x3d\x64\xbc\x98\x24\x2c\xa5\xb5\xe8\xc2\x32\x25\xc5\xde\x57\x12\x50\x7f\xc4\x11\x95\x4f\xe4\xae\xc4\x79\xf8\x3c\x90\xf8\xeb\xf1\x72\x44\x6e\x4c\x9d\xa6\xae\xaa\x9f\x0b\x96\x70\x4a\x74\x0c\xad\x4c\xda\xab\xd3\x99\xe3\xd9\xdb\x15\xc0\x82\x57\x3d\xf5\x78\x6f\x30\x34\xbe\x03\xea\x3d\xb8\x62\x1d\x02\x88\xc2\xb5\x04\x98\x69\x48\x8a\x67\xdf\xa0\x14\x25\x8f\x11\x6d\x14\xe8\x8e\x20\x78\x50\x61\xa2\x98\x96\x7f\x36\x98\x07\x3b\x8c\x16\x1e\x10\x20\x28\x8d\x3a\x10\xd5\x39\x71\x68\x82\xe6\x98\x6f\xa3\x65\x6b\x4e\x2a\x73\x16\x8c\xb3\xbd\x3a\x41\xc5\xbe\x7e\x77\x94\x8f\x46\xb2\x7d\x46\xb0\xfc\x24\x8d\x0b\xdc\x3b\x44\x8f\x5d\xbb\x4f\xb0\x76\xd2\xbc\x1e\x0c\xff\x0e\xad\x23\x4a\x07\xa7\x07\xb9\x6e\x38\xe4\xfb\x8c\xec\x55\xdd\x14\xc8\x3d\x78\x8d\xc0\x28\x62\x90\x5e\x69\xca\x2c\xaa\x6a\xcf\xaf\x3d\xbd\x41\xe4\x9b\xd6\x33\x9d\xa9\xf8\x0c\x5b\xd5\x64\xa0\x7b\xf1\xc9\x21\x1b\x9e\x96\xfd\x7c\x25\x8c\x88\x7d\xba\xb8\x3a\x62\xed\x95\xf6\x3b\xe4\x76\xeb\xed\xc3\x43\x89\x79\x8d\x79\x6c\x51\x37\xf4\x34\x8e\x75\x01\xd0\x06\x9c\x87\xa0\x1e\xc6\xe2\x48\x54\xc7\xca\x91\xcb\x63\xa3\x99\x5f\x9e\x0f\xeb\x31\x80\x5d\x90\xd6\x43\xfd\x76\xa7\x41\xfe\x76\x7b\xe8\xa5\xdb\xc1\xac\xe0\x61\x6e\x4d\xdd\x01\xfa\xde\xe3\xe7\x26\x74\x5e\xdf\x6c\x60\x54\xde\x41\xd7\x15\x57\x9e\x5d\xd5\x39\x63\xc6\x23\x00\x98\xd2\x2b\xaf\x7d\xed\x12\x27\xf2\x56\x07\xb1\x50\x75\x92\x42\x48\x98\x7d\x01\x43\x6f\xe9\x43\x28\x78\xa4\xc3\x1c\x12\x5a\x60\x52\x07\xb7\x3a\x7c\x17\x2c\x83\xf3\x46\x83\x0e\xbf\x7d\x23\xc1\xb5\x92\x29\xcf\x82\x9b\xbd\x34\xf4\xe1\x06\xd7\xc9\xe3\x63\x00\xc1\x0a\x62\xad\xbd\xf1\x17\x4a\xf8\xc6\x6a\x06\x23\x18\x2e\xcb\xfd\x66\x7e\xf0\x73\xe2\x9d\x42\x6f\x3d\x05\x80\xe0\xa7\xb4\xe0\x02\x72\xc4\xfb\xc4\xc4\x0e\xea\x29\xa6\x70\x2d\xaf\x19\xf9\x8c\x26\x7b\x33\x67\x1d\x97\xfd\xe1\xb2\x25\x87\x95\x6b\x28\x8e\xa8\xe2\x33\x72\xdc\x99\x91\xf7\x15\xa7\x60\xaa\xa6\x52\xfb\x1a\xc6\x60\x3a\x06\x36\x7e\xc4\x17\x6e\x43\xa0\xa1\x84\x02\xa0\xf1\xe3\x07\xfb\xf4\xde\x0e\x41\x6f\xcc\x2a\x55\xcb\xc4\x6f\xc9\x56\xd1\xc5\x22\x5a\x8c\x8a\x97\x74\xd7\x93\x3d\xc2\x4f\xdf\xe1\xdf\x28\xff\x01\x47\x3d\x2f\x23\x7d\x87\x7f\x7d\x19\xc7\x84\xda\x84\xcd\x9b\xc5\x0d\x9e\xdc\xe1\x64\x13\xbe\x6b\x6f\x75\x98\xe4\xde\xe9\x90\xed\x16\x4f\x20\xcd\x6c\x74\xbc\x96\xcc\x76\x58\x7b\xb1\x73\x88\x2d\x43\x3e\xdf\xfe\xa2\xe2\x1a\x47\x34\x45\xdc\x0a\xfa\xe6\x8e\xbc\x10\x04\x1e\xb4\x3a\x5f\xbf\xc3\x00\x88\x5f\x57\xfb\xf1\xa2\xd2\xb7\xa0\x16\xdb\x41\xed\x41\x92\x57\x54\x66\x8c\xbc\xbc\x9b\x91\x97\x3b\xb2\xbe\x22\x01\x98\xf9\xd1\xf6\xac\xc7\xc7\x01\x3d\x94\xdc\x16\x78\x5e\xde\xc1\xe6\x06\x2a\x68\x54\x22\x80\xaa\x3e\xef\x26\x74\xb5\x3b\x2e\x76\x7c\x39\x9c\x65\xd7\x1f\xe7\x12\xd3\xf3\xe8\xbf\x35\x1e\x0d\xdf\x8d\x7a\x95\x57\x03\xc9\x3d\x27\x86\x07\x74\x28\xfe\xb8\xe2\xa5\x21\xba\x8a\xff\x97\x96\x73\x5a\xc2\xde\x72\x0b\x8e\x42\x5e\x5a\xc9\xdb\xff\x97\x9a\x05\xa8\xc1\xf7\xe8\x35\x82\xdc\x30\x53\x4f\x6b\xda\xe6\x02\x64\x73\x88\xff\xa7\x56\x0c\xf4\xa8\xdf\xe4\x67\x45\x93\xb3\x57\x3f\x9d\x78\x36\x61\x53\x2f\x90\xce\xf8\xc2\xfe\x3f\x01\x00\x00\xff\xff\x62\xab\xa0\x23\xc0\x17\x00\x00")

func etcDocHtmlBytes() ([]byte, error) {
	return bindataRead(
		_etcDocHtml,
		"etc/doc.html",
	)
}

func etcDocHtml() (*asset, error) {
	bytes, err := etcDocHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/doc.html", size: 6080, mode: os.FileMode(420), modTime: time.Unix(1460128046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"etc/doc.html": etcDocHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"etc": &bintree{nil, map[string]*bintree{
		"doc.html": &bintree{etcDocHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

